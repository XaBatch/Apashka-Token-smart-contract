// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ApashkaToken is ERC20, ERC20Burnable, Ownable {
    uint256 public constant TEAM_LOCK_DURATION = 5 * 30 days;
    uint256 public teamUnlockTime;
    uint256 public teamTokens;

    constructor() ERC20("ApashkaToken", "$APASHKA") {
        uint256 totalSupply = 10_000_000_000 * 10 ** decimals();
        _mint(msg.sender, totalSupply);

        teamTokens = totalSupply / 10;
        teamUnlockTime = block.timestamp + TEAM_LOCK_DURATION;

        _transfer(msg.sender, address(this), teamTokens);
    }

    function claimTeamTokens() external onlyOwner {
        require(block.timestamp >= teamUnlockTime, "Team tokens are still locked");
        require(teamTokens > 0, "Team tokens already claimed");

        _transfer(address(this), msg.sender, teamTokens);
        teamTokens = 0;
    }
}
